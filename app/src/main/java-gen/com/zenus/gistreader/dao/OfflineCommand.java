package com.zenus.gistreader.dao;

import com.zenus.gistreader.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table OFFLINE_COMMAND.
 */
public class OfflineCommand implements java.io.Serializable {

    private Long id;
    private Integer command;
    private String gistId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient OfflineCommandDao myDao;

    private Gist gist;
    private String gist__resolvedKey;


    public OfflineCommand() {
    }

    public OfflineCommand(Long id) {
        this.id = id;
    }

    public OfflineCommand(Long id, Integer command, String gistId) {
        this.id = id;
        this.command = command;
        this.gistId = gistId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOfflineCommandDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getCommand() {
        return command;
    }

    public void setCommand(Integer command) {
        this.command = command;
    }

    public String getGistId() {
        return gistId;
    }

    public void setGistId(String gistId) {
        this.gistId = gistId;
    }

    /** To-one relationship, resolved on first access. */
    public Gist getGist() {
        String __key = this.gistId;
        if (gist__resolvedKey == null || gist__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GistDao targetDao = daoSession.getGistDao();
            Gist gistNew = targetDao.load(__key);
            synchronized (this) {
                gist = gistNew;
            	gist__resolvedKey = __key;
            }
        }
        return gist;
    }

    public void setGist(Gist gist) {
        synchronized (this) {
            this.gist = gist;
            gistId = gist == null ? null : gist.getId();
            gist__resolvedKey = gistId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
