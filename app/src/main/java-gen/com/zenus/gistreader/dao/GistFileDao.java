package com.zenus.gistreader.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.zenus.gistreader.dao.GistFile;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GIST_FILE.
*/
public class GistFileDao extends AbstractDao<GistFile, String> {

    public static final String TABLENAME = "GIST_FILE";

    /**
     * Properties of entity GistFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Filename = new Property(0, String.class, "filename", true, "FILENAME");
        public final static Property GistId = new Property(1, String.class, "gistId", false, "GIST_ID");
    };

    private DaoSession daoSession;

    private Query<GistFile> gist_FilesQuery;

    public GistFileDao(DaoConfig config) {
        super(config);
    }
    
    public GistFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GIST_FILE' (" + //
                "'FILENAME' TEXT PRIMARY KEY NOT NULL ," + // 0: filename
                "'GIST_ID' TEXT);"); // 1: gistId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_GIST_FILE_GIST_ID ON GIST_FILE" +
                " (GIST_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GIST_FILE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GistFile entity) {
        stmt.clearBindings();
 
        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(1, filename);
        }
 
        String gistId = entity.getGistId();
        if (gistId != null) {
            stmt.bindString(2, gistId);
        }
    }

    @Override
    protected void attachEntity(GistFile entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GistFile readEntity(Cursor cursor, int offset) {
        GistFile entity = new GistFile( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // filename
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // gistId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GistFile entity, int offset) {
        entity.setFilename(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGistId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(GistFile entity, long rowId) {
        return entity.getFilename();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(GistFile entity) {
        if(entity != null) {
            return entity.getFilename();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "files" to-many relationship of Gist. */
    public List<GistFile> _queryGist_Files(String gistId) {
        synchronized (this) {
            if (gist_FilesQuery == null) {
                QueryBuilder<GistFile> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GistId.eq(null));
                gist_FilesQuery = queryBuilder.build();
            }
        }
        Query<GistFile> query = gist_FilesQuery.forCurrentThread();
        query.setParameter(0, gistId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGistDao().getAllColumns());
            builder.append(" FROM GIST_FILE T");
            builder.append(" LEFT JOIN GIST T0 ON T.'GIST_ID'=T0.'ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected GistFile loadCurrentDeep(Cursor cursor, boolean lock) {
        GistFile entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Gist gist = loadCurrentOther(daoSession.getGistDao(), cursor, offset);
        entity.setGist(gist);

        return entity;    
    }

    public GistFile loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<GistFile> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<GistFile> list = new ArrayList<GistFile>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<GistFile> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<GistFile> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
